{
    "openapi": "3.0.0",
    "info": {
        "title": "Mentrify API",
        "description": "API documentation for the Mentrify platform.",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8080/api",
            "description": "Mentrify API Server"
        },
        {
            "url":"http://mentrifyapis.biruk.tech",
            "description": "Mentrify API Server (Production)"
        }
    ],
    "paths": {
        "/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user as Mentee or Mentor",
                "description": "Registers a new user (Mentee or Mentor) and returns user data along with an API token.",
                "operationId": "registerUser",
                "requestBody": {
                    "description": "User registration details. Provide 'user_type' as 'mentee' or 'mentor'. Fill fields accordingly.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "first_name",
                                    "last_name",
                                    "email",
                                    "password",
                                    "password_confirmation",
                                    "user_type"
                                ],
                                "properties": {
                                    "first_name": {
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "last_name": {
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john.doe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    },
                                    "user_type": {
                                        "type": "string",
                                        "enum": [
                                            "mentee",
                                            "mentor"
                                        ],
                                        "example": "mentee"
                                    },
                                    "interests": {
                                        "description": "Required if user_type is 'mentee'",
                                        "type": "string",
                                        "example": "Data Science, Product Management"
                                    },
                                    "goals": {
                                        "description": "Required if user_type is 'mentee'",
                                        "type": "string",
                                        "example": "To learn new skills and grow my career."
                                    },
                                    "photo_url": {
                                        "description": "Required if user_type is 'mentor'",
                                        "type": "string",
                                        "format": "url",
                                        "example": "http://example.com/photo.jpg"
                                    },
                                    "job_title": {
                                        "description": "Required if user_type is 'mentor'",
                                        "type": "string",
                                        "example": "Software Engineer"
                                    },
                                    "company": {
                                        "description": "Optional, for mentors",
                                        "type": "string",
                                        "example": "Tech Solutions Inc."
                                    },
                                    "location": {
                                        "description": "Required if user_type is 'mentor'",
                                        "type": "string",
                                        "example": "San Francisco, CA"
                                    },
                                    "category": {
                                        "description": "Required if user_type is 'mentor'",
                                        "type": "string",
                                        "enum": [
                                            "Engineering",
                                            "Product",
                                            "Design",
                                            "Marketing",
                                            "Leadership",
                                            "Other"
                                        ],
                                        "example": "Engineering"
                                    },
                                    "skills": {
                                        "description": "Required if user_type is 'mentor'",
                                        "type": "string",
                                        "example": "PHP, Laravel, API Design"
                                    },
                                    "bio": {
                                        "description": "Required if user_type is 'mentor'",
                                        "type": "string",
                                        "example": "Experienced software engineer passionate about mentoring."
                                    },
                                    "years_of_experience": {
                                        "description": "Required if user_type is 'mentor'",
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "availability_hours_week": {
                                        "description": "Required if user_type is 'mentor'",
                                        "type": "number",
                                        "format": "float",
                                        "example": 10.5
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful registration",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User registered successfully"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "access_token": {
                                            "type": "string",
                                            "example": "1|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login an existing user",
                "description": "Logs in a user and returns user data along with an API token.",
                "operationId": "loginUser",
                "requestBody": {
                    "description": "User login credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john.doe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Login successful"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "access_token": {
                                            "type": "string",
                                            "example": "2|yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials"
                    },
                    "422": {
                        "description": "Validation Error"
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout the authenticated user",
                "description": "Invalidates the current user's API token.",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully logged out"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "apiAuth": []
                    }
                ]
            }
        },
        "/api/conversations": {
            "get": {
                "tags": [
                    "Chat"
                ],
                "summary": "Get user's conversations",
                "description": "Retrieves all conversations for the authenticated user",
                "operationId": "getConversations",
                "responses": {
                    "200": {
                        "description": "Conversations retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Conversations retrieved successfully"
                                        },
                                        "conversations": {
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "$ref": "#/components/schemas/Conversation"
                                                    },
                                                    {
                                                        "properties": {
                                                            "unread_count": {
                                                                "type": "integer",
                                                                "example": 3
                                                            },
                                                            "other_participant": {
                                                                "$ref": "#/components/schemas/User"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Chat"
                ],
                "summary": "Create a new conversation",
                "description": "Creates a new conversation between mentor and mentee",
                "operationId": "createConversation",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "mentorship_id"
                                ],
                                "properties": {
                                    "mentorship_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "title": {
                                        "type": "string",
                                        "example": "Let's discuss your goals"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Conversation created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Conversation created successfully"
                                        },
                                        "conversation": {
                                            "$ref": "#/components/schemas/Conversation"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "403": {
                        "description": "Unauthorized to create conversation for this mentorship"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/conversations/{id}": {
            "get": {
                "tags": [
                    "Chat"
                ],
                "summary": "Get conversation details",
                "description": "Retrieves details of a specific conversation",
                "operationId": "getConversation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Conversation ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversation retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Conversation retrieved successfully"
                                        },
                                        "conversation": {
                                            "$ref": "#/components/schemas/Conversation"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Conversation not found"
                    },
                    "403": {
                        "description": "Unauthorized to access this conversation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/conversations/{id}/messages": {
            "get": {
                "tags": [
                    "Chat"
                ],
                "summary": "Get conversation messages",
                "description": "Retrieves messages for a specific conversation with pagination",
                "operationId": "getConversationMessages",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Conversation ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of messages per page",
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "maximum": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Messages retrieved successfully"
                                        },
                                        "messages": {
                                            "properties": {
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Message"
                                                    }
                                                },
                                                "current_page": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "last_page": {
                                                    "type": "integer",
                                                    "example": 5
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "example": 50
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "example": 234
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Conversation not found"
                    },
                    "403": {
                        "description": "Unauthorized to access this conversation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Chat"
                ],
                "summary": "Send a message",
                "description": "Sends a new message in a conversation",
                "operationId": "sendMessage",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Conversation ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "content"
                                ],
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "example": "Hello! How are you doing?"
                                    },
                                    "type": {
                                        "type": "string",
                                        "default": "text",
                                        "enum": [
                                            "text",
                                            "image",
                                            "file"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Message sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Message sent successfully"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error"
                    },
                    "403": {
                        "description": "Unauthorized to send message in this conversation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/messages/{id}/read": {
            "patch": {
                "tags": [
                    "Chat"
                ],
                "summary": "Mark message as read",
                "description": "Marks a specific message as read",
                "operationId": "markMessageRead",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Message ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message marked as read",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Message marked as read"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Message not found"
                    },
                    "403": {
                        "description": "Unauthorized to mark this message as read"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/conversations/{id}/read": {
            "patch": {
                "tags": [
                    "Chat"
                ],
                "summary": "Mark all messages as read",
                "description": "Marks all unread messages in a conversation as read",
                "operationId": "markConversationRead",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Conversation ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All messages marked as read",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "All messages marked as read"
                                        },
                                        "marked_count": {
                                            "type": "integer",
                                            "example": 5
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Conversation not found"
                    },
                    "403": {
                        "description": "Unauthorized to access this conversation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentee/dashboard": {
            "get": {
                "tags": [
                    "Mentees"
                ],
                "summary": "Get mentee dashboard data",
                "description": "Retrieves all necessary data for the mentee dashboard",
                "operationId": "getMenteeDashboard",
                "responses": {
                    "200": {
                        "description": "Mentee dashboard data retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "active_mentors_count": {
                                            "type": "integer",
                                            "example": 2
                                        },
                                        "learning_hours": {
                                            "type": "integer",
                                            "example": 16
                                        },
                                        "goals_completed_count": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "upcoming_sessions": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Session"
                                            }
                                        },
                                        "past_sessions": {
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "$ref": "#/components/schemas/Session"
                                                    },
                                                    {
                                                        "properties": {
                                                            "feedback_given": {
                                                                "type": "boolean",
                                                                "example": false
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "recent_conversations": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Conversation"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentee/sessions": {
            "get": {
                "tags": [
                    "Mentees"
                ],
                "summary": "Get sessions for the authenticated mentee",
                "operationId": "getMenteeSessions",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status (upcoming, completed, cancelled)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "upcoming",
                                "completed",
                                "cancelled"
                            ]
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search by session title or mentor name",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of mentee sessions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Session"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentee/details/{id}": {
            "get": {
                "tags": [
                    "Mentees"
                ],
                "summary": "Get user details by ID for a mentee",
                "description": "Retrieves user details for the given ID. Accessible by any authenticated user.",
                "operationId": "getMenteeDetailsById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentor/dashboard": {
            "get": {
                "tags": [
                    "Mentors"
                ],
                "summary": "Get mentor dashboard data",
                "description": "Retrieves all necessary data for the mentor dashboard",
                "operationId": "getMentorDashboard",
                "responses": {
                    "200": {
                        "description": "Mentor dashboard data retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "active_mentees_count": {
                                            "type": "integer",
                                            "example": 12
                                        },
                                        "average_rating": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 4.8
                                        },
                                        "hours_mentored": {
                                            "type": "integer",
                                            "example": 48
                                        },
                                        "upcoming_sessions": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Session"
                                            }
                                        },
                                        "recent_feedback": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Feedback"
                                            }
                                        },
                                        "recent_conversations": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Conversation"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentors": {
            "get": {
                "tags": [
                    "Mentors"
                ],
                "summary": "Get all mentors",
                "description": "Retrieves a list of all users with the 'mentor' type.",
                "operationId": "getMentors",
                "responses": {
                    "200": {
                        "description": "Mentors retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentor/details/{id}": {
            "get": {
                "tags": [
                    "Mentors"
                ],
                "summary": "Get user details by ID for a mentor",
                "description": "Retrieves user details for the given ID. Accessible by any authenticated user.",
                "operationId": "getMentorDetailsById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the user to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentorships/request/{mentor_id}": {
            "post": {
                "tags": [
                    "Mentorships"
                ],
                "summary": "Request a mentorship",
                "description": "Allows an authenticated user to request mentorship from a mentor.",
                "operationId": "requestMentorship",
                "parameters": [
                    {
                        "name": "mentor_id",
                        "in": "path",
                        "description": "ID of the mentor to request mentorship from",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Mentorship request created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Mentorship"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Mentor not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentorships/{mentorship_id}/accept": {
            "put": {
                "tags": [
                    "Mentorships"
                ],
                "summary": "Accept a mentorship request",
                "description": "Allows an authenticated mentor to accept a pending mentorship request.",
                "operationId": "acceptMentorship",
                "parameters": [
                    {
                        "name": "mentorship_id",
                        "in": "path",
                        "description": "ID of the mentorship request to accept",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mentorship request accepted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Mentorship"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (e.g., user is not the designated mentor or request is not pending)"
                    },
                    "404": {
                        "description": "Mentorship request not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentorships/{mentorship_id}/reject": {
            "put": {
                "tags": [
                    "Mentorships"
                ],
                "summary": "Reject a mentorship request",
                "description": "Allows an authenticated mentor to reject a pending mentorship request.",
                "operationId": "rejectMentorship",
                "parameters": [
                    {
                        "name": "mentorship_id",
                        "in": "path",
                        "description": "ID of the mentorship request to reject",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mentorship request rejected successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Mentorship"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (e.g., user is not the designated mentor or request is not pending)"
                    },
                    "404": {
                        "description": "Mentorship request not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentorships/{mentorship_id}/cancel": {
            "delete": {
                "tags": [
                    "Mentorships"
                ],
                "summary": "Cancel a mentorship request",
                "description": "Allows an authenticated mentee to cancel their pending mentorship request.",
                "operationId": "cancelMentorshipRequest",
                "parameters": [
                    {
                        "name": "mentorship_id",
                        "in": "path",
                        "description": "ID of the mentorship request to cancel",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mentorship request cancelled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Mentorship"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (e.g., user is not the mentee who made the request or request is not pending)"
                    },
                    "404": {
                        "description": "Mentorship request not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentorships/mentee/active": {
            "get": {
                "tags": [
                    "Mentorships"
                ],
                "summary": "Get connected mentors for the authenticated mentee",
                "description": "Retrieves a list of active mentorships where the authenticated user is the mentee.",
                "operationId": "getMenteeActiveMentorships",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved active mentorships",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Mentorship"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentorships/mentee/pending": {
            "get": {
                "tags": [
                    "Mentorships"
                ],
                "summary": "Get pending mentorship requests for the authenticated mentee",
                "description": "Retrieves a list of pending mentorship requests where the authenticated user is the mentee.",
                "operationId": "getMenteePendingMentorships",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved pending mentorships",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Mentorship"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentorships/mentor/active": {
            "get": {
                "tags": [
                    "Mentorships"
                ],
                "summary": "Get connected mentees for the authenticated mentor",
                "description": "Retrieves a list of active mentorships where the authenticated user is the mentor.",
                "operationId": "getMentorActiveMentorships",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved active mentorships",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Mentorship"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentorships/mentor/pending": {
            "get": {
                "tags": [
                    "Mentorships"
                ],
                "summary": "Get pending mentorship requests for the authenticated mentor",
                "description": "Retrieves a list of pending mentorship requests where the authenticated user is the mentor.",
                "operationId": "getMentorPendingMentorships",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved pending mentorships",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Mentorship"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentorships/{mentorship_id}/sessions": {
            "post": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Schedule a new session",
                "description": "Allows a user (mentor or mentee based on mentorship) to schedule a new session.",
                "operationId": "scheduleSession",
                "parameters": [
                    {
                        "name": "mentorship_id",
                        "in": "path",
                        "description": "ID of the mentorship",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Session details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "scheduled_at",
                                    "duration_minutes",
                                    "session_type"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Career Development Discussion"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Discuss career goals and next steps.",
                                        "nullable": true
                                    },
                                    "scheduled_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2025-06-15T10:00:00Z"
                                    },
                                    "duration_minutes": {
                                        "type": "integer",
                                        "example": 60
                                    },
                                    "session_type": {
                                        "type": "string",
                                        "enum": [
                                            "Video Call",
                                            "In-person",
                                            "Chat"
                                        ],
                                        "example": "Video Call"
                                    },
                                    "join_url": {
                                        "type": "string",
                                        "format": "url",
                                        "example": "https://meet.example.com/session123",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Session scheduled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (User not part of this mentorship or mentorship not active)"
                    },
                    "404": {
                        "description": "Mentorship not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentor/sessions": {
            "get": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Get sessions for the authenticated mentor",
                "operationId": "getMentorSessions",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status (upcoming, completed, cancelled)",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "upcoming",
                                "completed",
                                "cancelled"
                            ]
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search by session title or mentee name",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of mentor sessions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Session"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/sessions/{session_id}": {
            "get": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Get a specific session",
                "operationId": "getSessionById",
                "parameters": [
                    {
                        "name": "session_id",
                        "in": "path",
                        "description": "ID of the session",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (User not part of this session's mentorship)"
                    },
                    "404": {
                        "description": "Session not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Update/Reschedule a session",
                "description": "Allows a user (creator or participant) to update session details or reschedule it. Only for 'upcoming' sessions.",
                "operationId": "updateSession",
                "parameters": [
                    {
                        "name": "session_id",
                        "in": "path",
                        "description": "ID of the session",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Session details to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Updated Career Discussion"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Updated agenda.",
                                        "nullable": true
                                    },
                                    "scheduled_at": {
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2025-06-16T11:00:00Z"
                                    },
                                    "duration_minutes": {
                                        "type": "integer",
                                        "example": 75
                                    },
                                    "session_type": {
                                        "type": "string",
                                        "enum": [
                                            "Video Call",
                                            "In-person",
                                            "Chat"
                                        ],
                                        "example": "Video Call"
                                    },
                                    "join_url": {
                                        "type": "string",
                                        "format": "url",
                                        "example": "https://meet.example.com/session456",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Session updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (User not authorized or session not 'upcoming')"
                    },
                    "404": {
                        "description": "Session not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/sessions/{session_id}/cancel": {
            "patch": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Cancel an upcoming session",
                "operationId": "cancelSession",
                "parameters": [
                    {
                        "name": "session_id",
                        "in": "path",
                        "description": "ID of the session",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Reason for cancellation",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "cancellation_reason": {
                                        "type": "string",
                                        "example": "Unexpected conflict.",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Session cancelled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (User not authorized or session not 'upcoming')"
                    },
                    "404": {
                        "description": "Session not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/sessions/{session_id}/complete": {
            "patch": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Mark a session as completed",
                "description": "Allows a participant (mentor or mentee) to mark an upcoming or ongoing session as completed.",
                "operationId": "completeSession",
                "parameters": [
                    {
                        "name": "session_id",
                        "in": "path",
                        "description": "ID of the session",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session marked as completed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (User not authorized or session cannot be marked as completed)"
                    },
                    "404": {
                        "description": "Session not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/sessions/{session_id}/notes": {
            "patch": {
                "tags": [
                    "Sessions"
                ],
                "summary": "Add or update session notes",
                "description": "Allows the mentor or mentee to add/update their respective notes for a session. The request should contain EITHER 'notes_mentee' OR 'notes_mentor', relevant to the user's role.",
                "operationId": "updateSessionNotes",
                "parameters": [
                    {
                        "name": "session_id",
                        "in": "path",
                        "description": "ID of the session",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Notes content. Provide EITHER 'notes_mentee' OR 'notes_mentor'.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "oneOf": [
                                    {
                                        "required": [
                                            "notes_mentee"
                                        ],
                                        "properties": {
                                            "notes_mentee": {
                                                "type": "string",
                                                "example": "Key takeaways and action items for me.",
                                                "nullable": true
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "required": [
                                            "notes_mentor"
                                        ],
                                        "properties": {
                                            "notes_mentor": {
                                                "type": "string",
                                                "example": "Observations and guidance provided.",
                                                "nullable": true
                                            }
                                        },
                                        "type": "object"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Session notes updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Session"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (User not authorized to update notes for this role or session)"
                    },
                    "404": {
                        "description": "Session not found"
                    },
                    "422": {
                        "description": "Validation error (e.g., providing both note types, no notes, or notes for the wrong role)"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentorships/{mentorship_id}/tasks": {
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Create a new task for a mentee",
                "description": "Allows a mentor to create a new task for a mentee within a specific mentorship.",
                "operationId": "createTask",
                "parameters": [
                    {
                        "name": "mentorship_id",
                        "in": "path",
                        "description": "ID of the mentorship",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Task details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "title",
                                    "description"
                                ],
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Complete Chapter 1"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Read and summarize the first chapter of the book."
                                    },
                                    "due_date": {
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2025-12-31T23:59:59Z"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Task created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (User is not the mentor of this mentorship)"
                    },
                    "404": {
                        "description": "Mentorship not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentee/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Get tasks assigned to the authenticated mentee",
                "description": "Retrieves a list of tasks assigned to the currently authenticated mentee.",
                "operationId": "getMenteeTasks",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter tasks by status (e.g., pending, in_progress, completed)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved mentee tasks",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Task"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/mentor/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Get tasks assigned by the authenticated mentor",
                "description": "Retrieves a list of tasks assigned by the currently authenticated mentor.",
                "operationId": "getMentorTasks",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter tasks by status (e.g., pending, in_progress, completed)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "mentee_id",
                        "in": "query",
                        "description": "Filter tasks by a specific mentee ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved mentor tasks",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Task"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/tasks/{task_id}/status": {
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Update task status (Mentee)",
                "description": "Allows a mentee to update the status of their assigned task.",
                "operationId": "updateTaskStatus",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "ID of the task to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "New status for the task",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status"
                                ],
                                "properties": {
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending",
                                            "in_progress",
                                            "completed"
                                        ],
                                        "example": "in_progress"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task status updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (User is not assigned to this task)"
                    },
                    "404": {
                        "description": "Task not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/tasks/{task_id}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Get a specific task",
                "description": "Retrieves details of a specific task. Accessible by the mentor who assigned it or the mentee it's assigned to.",
                "operationId": "getTaskById",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (User is not authorized to view this task)"
                    },
                    "404": {
                        "description": "Task not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Update a task (Mentor)",
                "description": "Allows a mentor to update the details of a task they assigned.",
                "operationId": "updateTask",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "ID of the task to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Task details to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "example": "Complete Chapter 1 & 2"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "Read and summarize the first two chapters."
                                    },
                                    "due_date": {
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2026-01-15T23:59:59Z"
                                    },
                                    "status": {
                                        "type": "string",
                                        "enum": [
                                            "pending",
                                            "in_progress",
                                            "completed"
                                        ],
                                        "example": "pending"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (User is not the mentor who assigned this task)"
                    },
                    "404": {
                        "description": "Task not found"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Delete a task (Mentor)",
                "description": "Allows a mentor to delete a task they assigned.",
                "operationId": "deleteTask",
                "parameters": [
                    {
                        "name": "task_id",
                        "in": "path",
                        "description": "ID of the task to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden (User is not the mentor who assigned this task)"
                    },
                    "404": {
                        "description": "Task not found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "User": {
                "title": "User",
                "description": "User model",
                "properties": {
                    "id": {
                        "description": "ID of the user",
                        "type": "integer",
                        "format": "int64"
                    },
                    "first_name": {
                        "description": "First name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "Last name",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email address",
                        "type": "string",
                        "format": "email"
                    },
                    "user_type": {
                        "description": "Type of user",
                        "type": "string",
                        "enum": [
                            "mentor",
                            "mentee"
                        ]
                    },
                    "photo_url": {
                        "description": "URL of the user's photo",
                        "type": "string",
                        "nullable": true
                    },
                    "job_title": {
                        "description": "Job title (for mentors)",
                        "type": "string",
                        "nullable": true
                    },
                    "category": {
                        "description": "Category (for mentors)",
                        "type": "string",
                        "nullable": true
                    },
                    "created_at": {
                        "description": "Creation timestamp",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Mentorship": {
                "title": "Mentorship",
                "description": "Mentorship model",
                "properties": {
                    "id": {
                        "description": "ID of the mentorship",
                        "type": "integer",
                        "format": "int64"
                    },
                    "mentor_id": {
                        "description": "ID of the mentor",
                        "type": "integer",
                        "format": "int64"
                    },
                    "mentee_id": {
                        "description": "ID of the mentee",
                        "type": "integer",
                        "format": "int64"
                    },
                    "status": {
                        "description": "Status of the mentorship",
                        "type": "string",
                        "enum": [
                            "pending",
                            "active",
                            "rejected",
                            "cancelled",
                            "completed"
                        ]
                    },
                    "created_at": {
                        "description": "Creation timestamp",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Task": {
                "title": "Task",
                "description": "Task model",
                "properties": {
                    "id": {
                        "description": "ID of the task",
                        "type": "integer",
                        "format": "int64"
                    },
                    "title": {
                        "description": "Title of the task",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the task",
                        "type": "string"
                    },
                    "due_date": {
                        "description": "Due date of the task",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "status": {
                        "description": "Status of the task",
                        "type": "string",
                        "enum": [
                            "pending",
                            "in_progress",
                            "completed"
                        ]
                    },
                    "mentorship_id": {
                        "description": "ID of the mentorship this task belongs to",
                        "type": "integer",
                        "format": "int64"
                    },
                    "assigned_by": {
                        "description": "ID of the user (mentor) who assigned the task",
                        "type": "integer",
                        "format": "int64"
                    },
                    "assigned_to": {
                        "description": "ID of the user (mentee) to whom the task is assigned",
                        "type": "integer",
                        "format": "int64"
                    },
                    "created_at": {
                        "description": "Creation timestamp",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time"
                    },
                    "assigner": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "nullable": true,
                        "description": "The user (mentor) who assigned the task (loaded when requested)"
                    },
                    "assignee": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "nullable": true,
                        "description": "The user (mentee) to whom the task is assigned (loaded when requested)"
                    },
                    "mentorship": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Mentorship"
                            }
                        ],
                        "nullable": true,
                        "description": "The mentorship this task belongs to (loaded when requested)"
                    }
                },
                "type": "object"
            },
            "Conversation": {
                "title": "Conversation",
                "description": "Chat conversation between mentor and mentee",
                "properties": {
                    "id": {
                        "description": "Conversation ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "mentorship_id": {
                        "description": "ID of the associated mentorship",
                        "type": "integer",
                        "format": "int64"
                    },
                    "mentor_id": {
                        "description": "ID of the mentor",
                        "type": "integer",
                        "format": "int64"
                    },
                    "mentee_id": {
                        "description": "ID of the mentee",
                        "type": "integer",
                        "format": "int64"
                    },
                    "title": {
                        "description": "Optional conversation title",
                        "type": "string",
                        "nullable": true
                    },
                    "last_message_at": {
                        "description": "Timestamp of last message",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "is_active": {
                        "description": "Whether the conversation is active",
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "Timestamp of conversation creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last conversation update",
                        "type": "string",
                        "format": "date-time"
                    },
                    "mentorship": {
                        "$ref": "#/components/schemas/Mentorship"
                    },
                    "mentor": {
                        "$ref": "#/components/schemas/User"
                    },
                    "mentee": {
                        "$ref": "#/components/schemas/User"
                    },
                    "messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Message"
                        }
                    },
                    "last_message": {
                        "$ref": "#/components/schemas/Message"
                    }
                },
                "type": "object"
            },
            "Feedback": {
                "title": "Feedback",
                "description": "Feedback model for sessions",
                "properties": {
                    "id": {
                        "description": "Feedback ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "session_id": {
                        "description": "ID of the session being reviewed",
                        "type": "integer",
                        "format": "int64"
                    },
                    "reviewer_id": {
                        "description": "ID of the User giving feedback (usually mentee)",
                        "type": "integer",
                        "format": "int64"
                    },
                    "reviewee_id": {
                        "description": "ID of the User being reviewed (usually mentor)",
                        "type": "integer",
                        "format": "int64"
                    },
                    "rating": {
                        "description": "Rating from 1 to 5 stars",
                        "type": "integer",
                        "maximum": 5,
                        "minimum": 1,
                        "nullable": true
                    },
                    "comment": {
                        "description": "Textual feedback/comment",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp of feedback submission",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last feedback update",
                        "type": "string",
                        "format": "date-time"
                    },
                    "reviewer": {
                        "$ref": "#/components/schemas/User"
                    },
                    "session": {
                        "$ref": "#/components/schemas/Session"
                    }
                },
                "type": "object"
            },
            "Goal": {
                "title": "Goal",
                "description": "Mentee's personal or professional goal",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "user_id": {
                        "description": "ID of the User (Mentee) this goal belongs to",
                        "type": "integer",
                        "format": "int64"
                    },
                    "title": {
                        "description": "Title of the goal",
                        "type": "string"
                    },
                    "description": {
                        "description": "Detailed description of the goal",
                        "type": "string",
                        "nullable": true
                    },
                    "status": {
                        "description": "Current status of the goal",
                        "type": "string",
                        "default": "todo",
                        "enum": [
                            "todo",
                            "in_progress",
                            "completed",
                            "on_hold"
                        ]
                    },
                    "due_date": {
                        "description": "Optional due date for the goal",
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Message": {
                "title": "Message",
                "description": "Chat message model",
                "properties": {
                    "id": {
                        "description": "Message ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "conversation_id": {
                        "description": "ID of the conversation",
                        "type": "integer",
                        "format": "int64"
                    },
                    "sender_id": {
                        "description": "ID of the message sender",
                        "type": "integer",
                        "format": "int64"
                    },
                    "content": {
                        "description": "Message content",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of message",
                        "type": "string",
                        "enum": [
                            "text",
                            "image",
                            "file",
                            "system"
                        ]
                    },
                    "read_at": {
                        "description": "Timestamp when message was read",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "is_edited": {
                        "description": "Whether the message has been edited",
                        "type": "boolean"
                    },
                    "edited_at": {
                        "description": "Timestamp when message was last edited",
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "metadata": {
                        "description": "Additional message metadata (for files, images, etc.)",
                        "type": "object",
                        "nullable": true
                    },
                    "created_at": {
                        "description": "Timestamp of message creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last message update",
                        "type": "string",
                        "format": "date-time"
                    },
                    "conversation": {
                        "$ref": "#/components/schemas/Conversation"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object"
            },
            "Session": {
                "title": "Session",
                "description": "Mentoring session model",
                "properties": {
                    "id": {
                        "description": "Session ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    "mentor_id": {
                        "description": "ID of the Mentor (User)",
                        "type": "integer",
                        "format": "int64"
                    },
                    "mentee_id": {
                        "description": "ID of the Mentee (User)",
                        "type": "integer",
                        "format": "int64"
                    },
                    "title": {
                        "description": "Title or main topic of the session",
                        "type": "string"
                    },
                    "description": {
                        "description": "Detailed description or agenda",
                        "type": "string",
                        "nullable": true
                    },
                    "start_time": {
                        "description": "Scheduled start time of the session",
                        "type": "string",
                        "format": "date-time"
                    },
                    "end_time": {
                        "description": "Scheduled end time of the session",
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "description": "Status of the session",
                        "type": "string",
                        "enum": [
                            "upcoming",
                            "completed",
                            "cancelled",
                            "in_progress"
                        ]
                    },
                    "join_url": {
                        "description": "URL to join the virtual session",
                        "type": "string",
                        "nullable": true
                    },
                    "created_at": {
                        "description": "Timestamp of session creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of last session update",
                        "type": "string",
                        "format": "date-time"
                    },
                    "mentor": {
                        "$ref": "#/components/schemas/User"
                    },
                    "mentee": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "apiAuth": {
                "type": "http",
                "description": "Bearer token for authentication",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            },
            "sanctum": {
                "type": "http",
                "description": "Enter token in format (Bearer <token>)",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Chat",
            "description": "API Endpoints for Chat functionality"
        },
        {
            "name": "Mentors",
            "description": "API Endpoints for Mentor Operations"
        },
        {
            "name": "Mentorships",
            "description": "API Endpoints for managing mentorship connections"
        },
        {
            "name": "Sessions",
            "description": "API Endpoints for managing mentorship sessions"
        },
        {
            "name": "Tasks",
            "description": "API Endpoints for managing tasks"
        },
        {
            "name": "Authentication",
            "description": "Authentication"
        },
        {
            "name": "Mentees",
            "description": "Mentees"
        }
    ]
}